/*
 * WARNING: this is an autogenerated file and will be overwritten by
 * the extension interface script.
 */
/*
 * This file contains the automatically generated loader-side
 * functions that form part of the extension.
 *
 * This file is awlays compiled into all loaders but compiles
 * to nothing if this extension is not enabled in the loader
 * at build time.
 */
#include "IwDebug.h"
#include "s3eApsalar_autodefs.h"
#include "s3eEdk.h"
#include "s3eApsalar.h"
//Declarations of Init and Term functions
extern s3eResult s3eApsalarInit();
extern void s3eApsalarTerminate();


// On platforms that use a seperate UI/OS thread we can autowrap functions
// here.   Note that we can't use the S3E_USE_OS_THREAD define since this
// code is oftern build standalone, outside the main loader build.
#if defined I3D_OS_IPHONE || defined I3D_OS_OSX || defined I3D_OS_LINUX || defined I3D_OS_WINDOWS

static void s3eApStart_wrap(const char* apiKey, const char* apiSecret)
{
    IwTrace(APSALAR_VERBOSE, ("calling s3eApsalar func on main thread: s3eApStart"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eApStart, 2, apiKey, apiSecret);
}

static void s3eApRestart_wrap(const char* apiKey, const char* apiSecret)
{
    IwTrace(APSALAR_VERBOSE, ("calling s3eApsalar func on main thread: s3eApRestart"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eApRestart, 2, apiKey, apiSecret);
}

static bool s3eApStarted_wrap()
{
    IwTrace(APSALAR_VERBOSE, ("calling s3eApsalar func on main thread: s3eApStarted"));
    return (bool)(intptr_t)s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eApStarted, 0);
}

static void s3eApEnd_wrap()
{
    IwTrace(APSALAR_VERBOSE, ("calling s3eApsalar func on main thread: s3eApEnd"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eApEnd, 0);
}

static void s3eApLogEvent_wrap(const char* name)
{
    IwTrace(APSALAR_VERBOSE, ("calling s3eApsalar func on main thread: s3eApLogEvent"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eApLogEvent, 1, name);
}

static void s3eApLogEventWithArgs_wrap(const char* name, s3eApDict* dict)
{
    IwTrace(APSALAR_VERBOSE, ("calling s3eApsalar func on main thread: s3eApLogEventWithArgs"));
    s3eEdkThreadRunOnOS((s3eEdkThreadFunc)s3eApLogEventWithArgs, 2, name, dict);
}

#define s3eApStart s3eApStart_wrap
#define s3eApRestart s3eApRestart_wrap
#define s3eApStarted s3eApStarted_wrap
#define s3eApEnd s3eApEnd_wrap
#define s3eApLogEvent s3eApLogEvent_wrap
#define s3eApLogEventWithArgs s3eApLogEventWithArgs_wrap

#endif

void s3eApsalarRegisterExt()
{
    /* fill in the function pointer struct for this extension */
    void* funcPtrs[11];
    funcPtrs[0] = (void*)s3eApStart;
    funcPtrs[1] = (void*)s3eApRestart;
    funcPtrs[2] = (void*)s3eApStarted;
    funcPtrs[3] = (void*)s3eApEnd;
    funcPtrs[4] = (void*)s3eApLogEvent;
    funcPtrs[5] = (void*)s3eApDictCreate;
    funcPtrs[6] = (void*)s3eApDictAddString;
    funcPtrs[7] = (void*)s3eApDictAddInt;
    funcPtrs[8] = (void*)s3eApDictAddFloat;
    funcPtrs[9] = (void*)s3eApDictAddDict;
    funcPtrs[10] = (void*)s3eApLogEventWithArgs;

    /*
     * Flags that specify the extension's use of locking and stackswitching
     */
    int flags[11] = { 0 };

    /*
     * Register the extension
     */
    s3eEdkRegister("s3eApsalar", funcPtrs, sizeof(funcPtrs), flags, s3eApsalarInit, s3eApsalarTerminate, 0);
}

#if !defined S3E_BUILD_S3ELOADER

#if defined S3E_EDK_USE_STATIC_INIT_ARRAY
int s3eApsalarStaticInit()
{
    void** p = g_StaticInitArray;
    void* end = p + g_StaticArrayLen;
    while (*p) p++;
    if (p < end)
        *p = (void*)&s3eApsalarRegisterExt;
    return 0;
}

int g_s3eApsalarVal = s3eApsalarStaticInit();

#elif defined S3E_EDK_USE_DLLS
S3E_EXTERN_C S3E_DLL_EXPORT void RegisterExt()
{
    s3eApsalarRegisterExt();
}
#endif

#endif
